# rbind
rbind(c(1,2,3), c(4,5,6))
# cbind
cbind(c(1,3,5), c(2,4,6))
x <- matrix(1:10,ncol=2)
apply(x, 1, sum)
apply(x, 2, sum)
x <- matrix(1:10,ncol=2)
x
apply(x, 1, sum)
apply(x, 2, sum)
# lapply()
lapply(mtcars[,1:4], mean)
a <- data.frame(name=c("x","y","z"), weight=c(50,60,70))
b <- data.frame(name=c("y","z","x"), height=c(150,160,170))
merge(a,b)
num <- c(71,85,24,9,13)
num
sort(num,decreasing = T)
num
order(num)
order(num, decreasing = T)
a <- data.frame(x=c(1,4,7),
y=c(2,9,6),
z=c(4,3,1))
stackedA <- stack(a)
a <- data.frame(x=c(1,4,7),
y=c(2,9,6),
z=c(4,3,1))
stack(a)
stackedA <- stack(a)
stackedA
rm(a)
a <- data.frame(x=c(1,4,7),
y=c(2,9,6),
z=c(4,3,1))
stack(a)
stackedA <- stack(a)
stackedA
a <- data.frame(x=c(1,4,7),
y=c(2,9,6),
z=c(4,3,1))
stackedA <- stack(a)
stackedA
# unstack
unstack(stackedA)
unstack(stackedA, values~ind)
a <- c("x","y","z")
a[1]
a[-2]
a[1:2]
length(a)
NROW(a)
a <- c("x","y","z")
a[1]
a[-2]
a[2:3]
length(a)
NROW(a)
"x" %in% c("x","y","z")
"w" %in% c("x","y","z")
seq(1,5)
seq(1,7,2)
rep(1:2, times=4)
rep(1:2, each=3)
#list
a <- list(names"Data", num = c(10, "d", c(1,2)))
#list
(a <- list(names"Data", num = c(10, "d", c(1,2))))
#list
a <- list(names"Data", num = c(10, "d", TRUE)
#list
d <- list(names"Data", num = c(10, "d", TRUE)
#list
d <- list(names"Data", num = c(10, "d", TRUE))
#graph
plot(Orange$age, Orange$circumference)
plot(Orange$age, Orange$circumference, xlab = "orange Tree Age", ylab = "orange Tree Circumference", main = "Orange Tree")
plot(Orange$age, Orange$circumference, cex=2)
plot(Orange$age, Orange$circumference, cex=2, type='l')
plot(Orange$age, Orange$circumference, cex=2, type='b')
plot(Orange$age, Orange$circumference, cex=2, type='o')
plot(Orange$age, Orange$circumference, cex=2, type='n')
plot(Orange$age, Orange$circumference, cex=2)
plot(Orange$age, Orange$circumference, cex=2, type='l')
plot(Orange$age, Orange$circumference, cex=2, type='b')
plot(Orange$age, Orange$circumference, cex=2, type='o')
plot(Orange$age, Orange$circumference, cex=2, type='n')
plot(Orange$age, Orange$circumference, cex=2, lty="dashed")
plot(Orange$age, Orange$circumference, cex=2, type='l, lty="dashed")
getwd()
setwd()
readxl("/iris.xlsx")
iris_data <- readxl("/iris.xlsx")
iris_data
getwd()
setwd("/Users/kimminsoo/Desktop/R_basic")
library(readxl)
iris_data <- readxl("/iris.xlsx")
iris_data
iris_data <- read_excel("/iris.xlsx")
iris_data <- read_excel("iris.xlsx")
install.packages("readxl")
library(readxl)
iris_data <- read_excel("iris.xlsx")
iris_data
curve(sin, 0, 2*pi)
# plot practice
getwd()
# plot practice
getwd()
setwd("/kimminsoo/Desktop/R_basic")
getwd()
setwd("/Users/kimminsoo/Desktop/R_basic")
getwd()
# install and apply package
install.packages("ggplot2")
install.packages("ggmap")
install.packages("stringr")
install.packages("dplyr")
library(ggplot2)
library(ggmap)
library(stringr)
library(dplyr)
wifi_data <- read.csv(wifi.csv, header = T)
wifi_data <- read.csv("wifi.csv", header = T)
wifi_data <- read.csv("wifi.csv", header = T)
wifi_data <- read.csv("wifi.csv", header = T, fileEncoding = "UCS-2LE")
wifi_data <- read.csv("wifi.csv", header = T, fileEncoding = "euc-kr")
head(wifi_data)
# labeling
wifi_data2 <- wifi_data[,c(1,4,5)]
wifi_data2
head(wifi_data2)
names(wifi_data2) <- c("name", "x.point", "y.point")
head(wifi_data2)
wifi_data3 <- wifi_data2 %>% filer(
name == "동작구"
)
wifi_data3 <- wifi_data2 %>% filter(
name == "동작구"
)
qmplot(x.point, y.point, data = wifi_data3,
maptype = "toner-lite"m color=I("red"))
qmplot(x.point, y.point, data = wifi_data3,
maptype = "toner-lite", color=I("red"))
# install and apply package
install.packages("tidyr")
install.packages("tidyr")
library(tidyr)
# data load
acc_data <- read.csv("traffic_accident.csv", header = T)
# data load
acc_data <- read.csv("traffic_accident.csv", header = T, fileEncoding = "euc-kr")
# check attribution
names(acc_data)
names(acc_data) <- c("data", "h2","h4","h6","h8",
"h10","h12","h14","h16",
"h18","h20","h22","h24")
names(acc_data)
# gather(data, key, value, drop column list)
df_long <- gather(data, hour, count, -data, -type)
names(acc_data) <- c("date", "h2","h4","h6","h8",
"h10","h12","h14","h16",
"h18","h20","h22","h24")
names(acc_data)
# gather(data, key, value, drop column list)
df_long <- gather(data, hour, count, -date, -type)
df_long$date <- factor(df_long$date, levels = c("sun","mon","tue","wed",
"thu","fri","sat"), ordered=TRUE)
df_long$hour <- factor(df_long$hour, levels = c("h2","h4","h6","h8",
"h10","h12","h14","h16",
"h18","h20","h22","h24"), ordered = TRUE)
names(acc_data)
names(acc_data) <- c("date", "type", h2","h4","h6","h8",
# data load
acc_data <- read.csv("traffic_accident.csv", header = T, fileEncoding = "euc-kr")
# check attribution
names(acc_data)
names(acc_data) <- c("date", "type", h2","h4","h6","h8",
names(acc_data) <- c("date", "type", "h2","h4","h6","h8",
"h10","h12","h14","h16",
"h18","h20","h22","h24")
names(acc_data)
df_long <- gather(data, hour, count, -date, -type)
df_long <- gather(acc_data, hour, count, -date, -type)
df_long$date <- factor(df_long$date, levels = c("sun","mon","tue","wed",
"thu","fri","sat"), ordered=TRUE)
df_long$hour <- factor(df_long$hour, levels = c("h2","h4","h6","h8",
"h10","h12","h14","h16",
"h18","h20","h22","h24"), ordered = TRUE)
g <- ggplot(df_long, aes(x = date, y = count, colour=type)) + geom_point()
g
names(acc_data)
names(acc_data) <- c("acc_date", "type", "h2","h4","h6","h8",
"h10","h12","h14","h16",
"h18","h20","h22","h24")
names(acc_data)
# gather(data, key, value, drop column list)
df_long <- gather(acc_data, hour, count, -date, -type)
df_long$date <- factor(df_long$date, levels = c("sun","mon","tue","wed",
"thu","fri","sat"), ordered=TRUE)
df_long$hour <- factor(df_long$hour, levels = c("h2","h4","h6","h8",
"h10","h12","h14","h16",
"h18","h20","h22","h24"), ordered = TRUE)
g <- ggplot(df_long, aes(x = date, y = count, colour=type)) + geom_point()
g
g <- ggplot(df_long, aes(x = date, y = count, colour=type)) + geom_point() +
theme(text = element_text(family = "AppleGothic.ttf"))
g
g <- ggplot(df_long, aes(x = date, y = count, colour=type)) + geom_point()
g <- ggplot(df_long, aes(x = date, y = count, colour=type)) + geom_point()
#  theme(text = element_text(family = "AppleGothic.ttf"))
g
# gather(data, key, value, drop column list)
df_long <- gather(acc_date, hour, count, -date, -type)
df_long$date <- factor(df_long$date, levels = c("sun","mon","tue","wed",
"thu","fri","sat"), ordered=TRUE)
df_long$hour <- factor(df_long$hour, levels = c("h2","h4","h6","h8",
"h10","h12","h14","h16",
"h18","h20","h22","h24"), ordered = TRUE)
g <- ggplot(df_long, aes(x = date, y = count, colour=type)) + geom_point()
#  theme(text = element_text(family = "AppleGothic.ttf"))
g
g <- ggplot(df_long, aes(x = acc_date, y = count, colour=type)) + geom_point()
#  theme(text = element_text(family = "AppleGothic.ttf"))
g
#  theme(text = element_text(family = "AppleGothic.ttf"))
g
g <- ggplot(df_long, aes(x = acc_date, y = count, colour=type)) + geom_point()
#  theme(text = element_text(family = "AppleGothic.ttf"))
g
# Library data
getwd()
# install and apply packages
install.packages("dplyr")
install.packages("dplyr")
install.packages("dplyr")
install.packages("dplyr")
install.packages("dplyr")
install.packages("dplyr")
install.packages("ggplot2")
install.packages("ggplot2")
install.packages("ggmap")
install.packages("RColorBrewer")
library(dplyr)
library(ggplot2)
library(ggmap)
library(RColorBrewer)
# load data
df_source = read.csv(file = "library.csv",
stringsAsFactors = FALSE,
fileEncoding = "euc-kr")
View(df_source)
# labeling
df_data <- tbl_df(df_source)
df_data[df_data$도서관유형 == '공공',]$도서관유형 <- '공공도서관'
df_data[df_data$도서관유형 == '작은',]$도서관유형 <- '작은도서관'
df_data[df_data$도서관유형 == '공공도서간',]$도서관유형 <- '공공도서관'
df_source = read.csv(file = "library.csv",
stringsAsFactors = FALSE,
fileEncoding = "euc-kr")
df_data <- tbl_df(df_source)
df_data[df_data$도서관유형 == '공공',]$도서관유형 <- '공공도서관'
df_data[df_data$도서관유형 == '작은',]$도서관유형 <- '작은도서관'
df_data[df_data$도서관유형 == '공공도서간',]$도서관유형 <- '공공도서관'
df_data <- df_data[df_data$도서관명 > '',]
df_data$시도명 <- factor(df_data$시도명)
df_data$도서관유형 <- factor(df_data$도서관유형)
df_data$자료수.도서. <- gsub('"', "", df_data$자료수.도서.)
df_data$자료수.도서. <- gsub(',', "", df_data$자료수.도서.)
df_data$자료수.도서. <- as.numeric(df_data$자료수.도서.)
df_data$자료수.비도서. <- gsub('"', "", df_data$자료수.비도서.)
df_data$자료수.비도서. <- gsub(',', "", df_data$자료수.비도서.)
df_data$자료수.비도서. <- as.numeric(df_data$자료수.비도서.)
df_data$자료수.연속간행물. <- gsub('"', "", df_data$자료수.연속간행물.)
df_data$자료수.연속간행물. <- gsub('.', "", df_data$자료수.연속간행물.)
df_data$자료수.연속간행물. <- as.numeric(df_data$자료수.연속간행물.)
df_data$위도 <- as.double(df_data$위도)
df_data$경도 <- as.double(df_data$경도)
View(df_source)
sido_count <- df_data %>% group_by(시도명) %>% summarise(cnt = n())
g <- ggplot(sido_count, aes(x = reorder(시도명, cnt),
y = cnt, fill=시도명)) + geom_bar(stat = "identity")
g <- g + xlab("시도명") + ylab("도서관수")
g
g <- g + theme(text = element_text(family = "AppleGothic.ttf"))
g <- g + theme(axis.text.x = element_text(angle = 30, hjust = 1, vjust = 1, family = "AppleGothic.ttf"))
g
g <- g + theme(text = element_text(family = "/System/Library/Fonts/Supplemental/AppleGothic.ttf"))
g <- g + theme(axis.text.x = element_text(angle = 30, hjust = 1, vjust = 1,
family = "/System/Library/Fonts/Supplemental/AppleGothic.ttf"))
g
g <- g + xlab("시도명") + ylab("도서관수")
g
g <- g + xlab("시도명") + ylab("도서관수")
g <- g + theme(text = element_text(family = "/System/Library/Fonts/Supplemental/AppleGothic.ttf"))
g <- g + theme(axis.text.x = element_text(angle = 30, hjust = 1, vjust = 1,
family = "/System/Library/Fonts/Supplemental/AppleGothic.ttf"))
g
g <- g + theme(text = element_text(family = "/System/Library/Fonts/Supplemental/AppleGothic"))
g <- g + theme(axis.text.x = element_text(angle = 30, hjust = 1, vjust = 1,
family = "/System/Library/Fonts/Supplemental/AppleGothic"))
g
df_data %>% group_by(도서관유형) %>% summarise(cnt = n(), round(cnt / m, 2))
m <- length(df_data$도서관명)
df_data %>% group_by(도서관유형) %>% summarise(cnt = n(), round(cnt / m, 2))
df_data %>% group_by(도서관유형) %>% summarise(cnt = n(), round(cnt / m, 2))
g <- ggplot(df_data[df_data$자료수.도서. < 200000,],
aes(x = 자료수.도서., fill=도서관유형)) + geom_histogram(bins = 100)
g
# filtering small library
df_data2 <- df_data %>% filter(
도서관유형 == "작은도서관"
)
df_data2 <- rename(df_data2, "name" = "도서관유형", "lat" = "위도", "lon" = "경도")
df_data3 <- df_data2[,c(4,20,21)]
df_data3 <- df_data3[df_data3$lon<=130,]
qmplot(lon, lat, data=df_data3, maptype = "toner-lite" ,color = "작은도서관")
qmplot(lon, lat, data = df_data3, maptype = "toner-lite", color = "작은도서관") +
stat_density_2d(aes(fill - stat(level)), geom = "polygon", alpha = .4, bins = 15) +
scale_fill_gradientn(colors = brewer.pal(7, "ylorRd"))
qmplot(lon, lat, data = df_data3, maptype = "toner-lite", color = "작은도서관") +
stat_density_2d(aes(fill - stat(level)), geom = "polygon", alpha = .4, bins = 15) +
scale_fill_gradientn(colors = brewer.pal(7, "YlorRd"))
qmplot(lon, lat, data = df_data3, maptype = "toner-lite", color = "작은도서관") +
stat_density_2d(aes(fill - stat(level)), geom = "polygon", alpha = .4, bins = 15) +
scale_fill_gradientn(colors = brewer.pal(7, "YlOrRd"))
# WordCloud
install.packages("KoNLP")
library(KoNLP)
# WordCloud
install.packages("KoNLP")
# WordCloud
check.for.updates.R()
# WordCloud
install.packages("installr")
library(installr)
check.for.updates.R()
install.R()
install.packages("KoNLP")
# WordCloud
install.packages("KoNLP")
